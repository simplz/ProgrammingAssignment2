find.package ("devtools")
install.packages("devtools")
library(devtools)
find_rtools
find_rtools()
install.packages("devtools")
library(devtools)
find_rtools()
library(Kernsmooth)
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
x<-c(3,5,1,10,12,6)
x[x!=6]<-0
x
x<-c(3,5,1,10,12,6)
x
x[x %in% 1:5]<-0
x
read.table
read.table("hw1_data")
read.table("hw1_data.csv")
read.table("hw1_data.txt")
pwd
getwd()
getwd()
read.table("hw1_data.txt")
read.table("hw1_data.csv")
read.table("hw1_data.txt")
read.table
ls
ls()
load("C:\\Users\\Home Pc\\Documents\\CK_Business\\OMO Technologies\\Coursera - Big Data\\Coursera Working Directory\\hw1_data.csv")
read.csv(hw1_data.csv)
read.csv("hw1_data.csv")
read.table("hw1_data.csv")
read.csv("hw1_data.csv")
x(152:153,)
con<-file("hw1_data.csv")
x<-readLines(con,152:153)
x
x<-readLines(con,10)
x
x<-readLines(con,10)
read.csv("hw1_data.csv")
print
print(152:153,)
x<-readLines(con,47)
x
read.csv("hw1_data.csv")
con(c(47,1))
x(c(47,1))
x
x<-read.csv("hw1_data.csv")
x
x(c(47,1))
x(47,1)
x[47,1]
x[152,]
is.na(x)
sum(is.na(x))
x[,1]
x
x[,1]
sum(is.na(x[,1])
x[,1]
sum(is.na(x[,1])
s
x[,1]
y<-x[,1]
sum(is.na(y))
y
good<-complete.cases(y)
good
good(true)
good
mean(good)
mean(y)
y(good)
y
y[good]
mean y[good]
mean(y[good])
x
z<-x(,4)
z<-x[,4]
z
x
subset<-(x[,1]>31,x[,4]>90)
(x[,1]>31,x[,4]>90)
(x[,1]>31&x[,4]>90)
x
x[x>31]
x[x>"31"]
y<-x[154,1]
y
y[good]
x[154,]
x
x[153,]
y
data<-read.csv("hw1_data")
data<-read.csv("hw1_data.csv")
data
subset(data, Ozone > 31 & Temp > 90)
mean[data(,2)]
mean(data[,2])
mean(subset[,2])
extract<-subset(data, Ozone > 31 & Temp > 90)
mean(extract[,2])
Temp<-subset(data, Temp == 6)
temp
Temp
Temp<-subset(data, Temp = 6)
Temp<-subset(data, Temp = 6)
Temp
Temp<-subset(data, Month == 6)
Temp
mean(Temp[,4]
)
max<-subset(data, Month == 5)
max
maximum(max[,4]
)
max(max[,4])
max(max[,1])
maxNA<-complete.cases(max)
maxNA
max(maxNA)
max[maxNA]
max
Ozone <- max[,1]
good<-complete.cases(Ozone)
good
Ozone(good)
Ozone[good]
mean(Ozone[good])
max(Ozone[good])
q()
setwd("C:/Users/Home Pc/ProgrammingAssignment2")
?function()
## Course 2 Week 2 Assignment:
## Caching the Inverse of a Matrix
## makeCacheMatrix: This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
## set function -> y as a square matrix.
## solve() will return a inverse matrix of y and assign to x.
set <- function(y = matrix()){
x <<- solve(y)
m <<- NULL
}
get <- function () x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## cacheSolve: This function computes the inverse of the special "matrix" returned
## by makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then cacheSolve should retrieve the inverse
## from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
set(matrix(1:6, 2, 3))
makeCacheMatrix(matrix(1:6, 2, 3))
getwd()
## Course 2 Week 2 Assignment:
## Caching the Inverse of a Matrix
## makeCacheMatrix: This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
## set function -> y as a square matrix.
## solve() will return a inverse matrix of y and assign to x.
set <- function(y = matrix()){
x <<- solve(y)
m <<- NULL
}
get <- function () x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## cacheSolve: This function computes the inverse of the special "matrix" returned
## by makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then cacheSolve should retrieve the inverse
## from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix
makeCacheMatrix(matrix(1:6, 2, 3))
cacheSolve
m
return(m)
return x
makeCacheMatrix(matrix(1:6, 2, 3))
makeCacheMatrix(matrix(1:6, 2, 3))
cacheSolve()
cacheSolve(matrix(1:6, 2, 3))
cacheSolve(matrix(4:4, 4, 4))
makeCacheMatrix(matrix(4:4, 4, 4))
cacheSolve(matrix(4:4, 4, 4))
